apply plugin: 'groovy'
apply plugin: 'eclipse'
//apply plugin: 'application'

sourceCompatibility = JavaVersion.VERSION_1_8
version = '0.2.1'

repositories {
	mavenCentral()
	maven {
		// for HTTP Builder
		url "http://repository.codehaus.org"
		url "http://snapshots.repository.codehaus.org"
	}
}

dependencies {
	compile ('org.codehaus.groovy:groovy-all:2.3.3') {transitive = false}
	compile ('org.twitter4j:twitter4j-core:[4.0,)') {transitive = false}
//	compile 'org.codehaus.groovy.modules.http-builder:http-builder:[0.7,)'
//	compile 'org.hibernate:hibernate-gradle-plugin:4.3.6.Final'
	compile ('org.apache.logging.log4j:log4j-core:2.0.1') {transitive = false}
	compile ('org.apache.logging.log4j:log4j-api:2.0.1') {transitive = false}
	compile ('org.apache.logging.log4j:log4j-slf4j-impl:2.0.1') {transitive = false}
	compile ('org.slf4j:slf4j-api:1.7.7') {transitive = false}
	compile ('com.fasterxml.jackson.core:jackson-core:[2.4,)') {transitive = false}
	compile ('com.fasterxml.jackson.core:jackson-databind:[2.4,)') {transitive = false}
	compile ('com.fasterxml.jackson.core:jackson-annotations:[2.4,)') {transitive = false}
	compile ('com.h2database:h2:1.4.180') {transitive = false}
	testCompile 'org.spockframework:spock-maven:0.7-groovy-2.0'
//	testCompile 'junit:junit:4.11'
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile) each { it.groovyOptions.encoding = defaultEncoding }


compileJava {
	
	// twitter4j.propertiesを使って使用するconsumer keysを設定する
	def prop = new Properties()
	prop.load(new FileInputStream("$projectDir/twitter4j.properties"))
	def config = new ConfigSlurper().parse(prop)
	
	// バイトデータでキー情報を保持
	Map <String, String> keymap = new HashMap<>()
	keymap.put("consumerKey", config.oauth.consumerKey)
	keymap.put("consumerSecret", config.oauth.consumerSecret)

	File keydata = new File("$projectDir/src/main/resources/white/box/reins/key.data")
	if (!keydata.exists()) {
		keydata.createNewFile()
	}

	ByteArrayOutputStream baos = new ByteArrayOutputStream()
	ObjectOutputStream oos = new ObjectOutputStream(baos)
	oos.writeObject(keymap)
	keydata.write(baos.toByteArray().encodeBase64().toString())
}

//jar {
//	copy {
//		from configurations.compile
//		into "tmp/lib"
//	}
//	String manifestClasspath = configurations.compile.collect { "lib/" + it.getName() }.join(' ')
//	manifest {
//		attributes (
//			'Implementation-Title': 'reins',
//			'Implementation-Version': version,
//			'Class-Path': ". ".concat(manifestClasspath),
//			'Main-Class' : 'white.box.reins.Main'
//		)
//	}
//	from (configurations.compile.resolve().collect { it.isDirectory() ? it : fileTree(it) })
//	destinationDir = file("tmp")
//}

// fat jar用の設定
jar {
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	manifest {
		attributes (
			'Implementation-Title': 'reins',
			'Implementation-Version': version,
			'Main-Class' : 'white.box.reins.Main'
		)
	}
}

//run {
//	standardInput = System.in
//}
//
//mainClassName = 'white.box.reins.Main'
